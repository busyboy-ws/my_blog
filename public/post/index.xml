<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 小松松的个人博客，记录学习和生活的点点滴滴！</title>
    <link>/post/</link>
    <description>Recent content in Posts on 小松松的个人博客，记录学习和生活的点点滴滴！</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>小松松</copyright>
    <lastBuildDate>Wed, 06 May 2020 16:01:23 +0800</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>一起来刷leetcode吧</title>
      <link>/post/leetcode/</link>
      <pubDate>Thu, 09 Apr 2020 16:01:23 +0800</pubDate>
      
      <guid>/post/leetcode/</guid>
      <description>Introduction 对于技术人来说，算法,数据结构是和别人区分开的一个实质性体现，闲来无事的时候刷一刷,增加自己的技能是非常必要的. 欢迎start和关注，一起</description>
    </item>
    
    <item>
      <title>k8s集群上部署kafka集群</title>
      <link>/post/kafka%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/</link>
      <pubDate>Wed, 06 May 2020 16:01:23 +0800</pubDate>
      
      <guid>/post/kafka%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3/</guid>
      <description>前言 公司需要一套kafka集群来采集各个区域的用户行为日志,目前香港集群已经部署完成,还需要在东南亚和北美各创建一个kafka集群并将数据同</description>
    </item>
    
    <item>
      <title>从socket看事件驱动</title>
      <link>/post/socket-for-ioevent/</link>
      <pubDate>Sat, 11 Apr 2020 16:01:23 +0800</pubDate>
      
      <guid>/post/socket-for-ioevent/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;最近一段时间在看werkzegu的源码，也就顺手自己实现了一个类似werkzuge的功能代码，但写完后用&lt;code&gt;ab&lt;/code&gt;压测发现不能支持并发，每个请求都是串行的，这也就引起了我极大的疑惑，顾来写这边文章记录一下. 以下是疑虑的问题所在:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么使用&lt;code&gt;ab&lt;/code&gt;压测&lt;strong&gt;werkzuge&lt;/strong&gt;可以实现并发处理http请求(注：不是真正的并发，只是在请求上)，底层用了什么技术.(io事件驱动)&lt;/li&gt;
&lt;li&gt;io事件驱动和多线程和多进程有什么关系呢？(也考虑过和协程的关系)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;带着这样的问题，我做了以下的代码编写.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Werkzuge的一次请求和响应</title>
      <link>/post/werkzuge-request/</link>
      <pubDate>Tue, 04 Feb 2020 16:01:23 +0800</pubDate>
      
      <guid>/post/werkzuge-request/</guid>
      <description>&lt;h2 id=&#34;werkzuge示例&#34;&gt;werkzuge示例&lt;/h2&gt;
&lt;p&gt;一个简单的werkzuge示例如下所示:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 技巧</title>
      <link>/post/python-skill/</link>
      <pubDate>Mon, 30 Sep 2019 16:01:23 +0800</pubDate>
      
      <guid>/post/python-skill/</guid>
      <description>&lt;p&gt;&lt;strong&gt;首先说明,这只是一些常见的使用技巧或者方法,你完全可以使用别的方式实现.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;1遵循pep-8风格&#34;&gt;1.遵循PEP 8风格&lt;/h4&gt;
&lt;p&gt;PEPE 8是针对Python代码格式而编写的风格指南.目的是让每个开发人员遵循同一种风格来编写代码，这样书写可以使代码更加易懂、易读;方便自己,也方便他人. PEP8 的指南在其官网地址为:&lt;a href=&#34;https://www.python.org/dev/peps/pep-0008/&#34;&gt;链接&lt;/a&gt;,这里列出几条绝对要准许的规则。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>记录一次公司的网络丢包</title>
      <link>/post/mysql-network/</link>
      <pubDate>Sun, 04 Aug 2019 16:01:23 +0800</pubDate>
      
      <guid>/post/mysql-network/</guid>
      <description>&lt;p&gt;最近公司网络出现一个很诡异的现象,Navicat连接阿里云数据库等待一段时间(大约5s)之后,再次执行相应的SQL语句会变的异常卡顿,经过排查问题出现在我们的防火墙设备上,以下是排查过程.&lt;/p&gt;

&lt;h2 id=&#34;一现象描述&#34;&gt;一、现象描述&lt;/h2&gt;

&lt;p&gt;大约在15号下午左右,开发人员反馈Navicat连接阿里云数据库非常的卡顿,平时秒级的查询今天要查询很久,无法忍受。&lt;/p&gt;

&lt;p&gt;接开发人员反馈后立即登陆到本地的一个ubuntu机器进行网络测试,因为从现象上来看可以大致判断这是一个网络问题,于是ping对应的RDS数据后发现网络并没有什么异常。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>二进制存储</title>
      <link>/post/bin-store/</link>
      <pubDate>Thu, 06 Jun 2019 16:01:23 +0800</pubDate>
      
      <guid>/post/bin-store/</guid>
      <description>&lt;p&gt;这一篇主要讲解内存和寄存器是如何存储数据。&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;逻辑电路&lt;/strong&gt;那篇文章中,讲述了如果使用逻辑门来搭建一个加\减法器,也就是说我们可以模拟CPU做加法运算了,但是这还远远不够,计算的结果我们该如何存储呢？ 我们总不能直接丢弃了吧。&lt;/p&gt;
&lt;p&gt;这一篇我就带你来看看如和使用逻辑门来存储一位二进制数据bit,在此基础上在对底层进行抽象看看如何存储多位数据。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker所依赖的Linux内核技术</title>
      <link>/post/docker-linux/</link>
      <pubDate>Fri, 10 May 2019 16:01:23 +0800</pubDate>
      
      <guid>/post/docker-linux/</guid>
      <description>上一篇文章讲到Docker本质上还是一个进程，它的隔离主要依赖于Linux内核的Namespace机制，这篇文章就带你从进程创建到Names</description>
    </item>
    
    <item>
      <title>Docker 基础</title>
      <link>/post/docker-basic/</link>
      <pubDate>Wed, 01 May 2019 15:43:48 +0800</pubDate>
      
      <guid>/post/docker-basic/</guid>
      <description>&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Docker和虚拟机有什么关系和区别？&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;Docker是如何实现隔离的？&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;浅谈docker历史&#34;&gt;浅谈Docker历史&lt;/h2&gt;
&lt;p&gt;2013年我刚进入大学学习技术的时候，在学校的技术社团和老师的谈话中听到最多的莫过于&lt;strong&gt;云计算&lt;/strong&gt;,其中听到最多的专业名词是openstack;那时听着他们说叫做IASS项目,不过随着不断的学习OpenStack慢慢淡出了我们视野，随之而来谈论更多的便是&lt;strong&gt;docker&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在2013PASS的热潮中，dotCloud宣布开源自己的容器项目Docker,在当时容器并不是什么新鲜的东西,并且在之前Cloud Foundry早已实现了&amp;quot;容器&amp;quot;的技术,显然这个决定根本也没有人在乎;但由于Docker独特的&lt;strong&gt;镜像&lt;/strong&gt;技术成为Docker弯道超车的不二法宝,并在段段几个月内,Docker项目就迅速崛起,以至于所有的PASS社区在还没有成为他的竞争对手就直接被宣告出局。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>逻辑电路</title>
      <link>/post/logic-circuit/</link>
      <pubDate>Sat, 27 Apr 2019 16:01:23 +0800</pubDate>
      
      <guid>/post/logic-circuit/</guid>
      <description>&lt;h2 id=&#34;一逻辑电路&#34;&gt;一、逻辑电路&lt;/h2&gt;
&lt;p&gt;在数字逻辑电路中，电平的高低有两种状态，我们称之为&lt;strong&gt;高电平&lt;/strong&gt;、&lt;strong&gt;低电平&lt;/strong&gt;。一般规定低电平为0~0.25V,高电平为3.5-5V. 在TTL门电路中，把低电平用数字0表示，把高电平用数字1表示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/circuit/dianlu.jpg&#34; alt=&#34;dianlu&#34;&gt;&lt;/p&gt;
&lt;p&gt;由此可以看出，高低电频的表示和二进制数字的表示法一样，那么我们就可以使用组合的逻辑电路来实现二进制之间的逻辑计算。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数字基础</title>
      <link>/post/number-basic/</link>
      <pubDate>Sun, 21 Apr 2019 16:01:23 +0800</pubDate>
      
      <guid>/post/number-basic/</guid>
      <description>&lt;p&gt;计算机基础之数字的表示&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.我们生活中常用的数字如何在计算机中使用二进制表示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.这些数如何做数字运算。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;一常用进制&#34;&gt;一、常用进制&lt;/h2&gt;
&lt;p&gt;对于习惯使用十个手指头的人类来说，早已习惯使用数字1~10来表示我们生活的数字。 我们也称之为十进制数。&lt;/p&gt;
&lt;p&gt;但现在使用过计算机的人来说都知道计算机底层采用的都是二进制数来表示，这是由于依赖于底层电器信号的限制我们只能模拟出低电频和(0)和高电频(1)的信号,自然使用数字&lt;strong&gt;0&lt;/strong&gt;和&lt;strong&gt;1&lt;/strong&gt;表示最为合适. 但这种表示方法对于人来说不易读而且表示冗长;所以,向上又使用了十六进制来表示，使其变得易读。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>